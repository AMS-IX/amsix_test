#!/usr/bin/perl
use strict;
use warnings;

use Test::Exception;
use Test::More tests => 18;

# Do not let warnings happen during test execution
BEGIN { $SIG{__WARN__} = sub { die @_ } }

my $class = 'M6::App::Config';
my $yaml  = 'YAML::XS';

require_ok ( $class );
require_ok ( $yaml );

my @methods = qw( new get put get_all );

can_ok( $class, @methods );

my $configured_app  = 'm6-autoprovision';
my $site            = 'DEFAULT';
my $dir             = './t/m6-app-config';
my $appclass        = "$dir/m6-app-config.yml";

M6::App::Config->_set_config_dir ( $appclass );
my $cnf = M6::App::Config->new( $configured_app, $site );

isa_ok $cnf, $class,
 $class . '->new() returns a new M6::App::Config object';

my $autoprovision_config = "$dir/DEFAULT/$configured_app.yml";

my $href = { 
 app             => $configured_app, 
 fb_done         => 0, 
 fallback        => 0, 
 site            => 'DEFAULT',
 config          => YAML::AppConfig->new( file       => $appclass, 
                                          yaml_class => $yaml ),
 $configured_app => YAML::AppConfig->new( file       => $autoprovision_config, 
                                          yaml_class => $yaml ) 
};

is_deeply $cnf, $href,
 '... and it contains application specific name, and settings.';

$cnf  = M6::App::Config->new( $configured_app );
is_deeply $cnf, $href,
 '... site gets a default value, even if it\'s not passed.';

is $cnf->get( 'ping_header' ), '/usr/bin/sudo /bin/ping',
 '$CNF->get(\'ping_header\') returns the application specific setting';

is $cnf->get( 'sudo_default' ), '/usr/bin/sudo_def',
 '$CNF->get(\'sudo_default\') falls back to application default setting';

is $cnf->get( 'sudo_most_default' ), '/usr/bin/sudo_most_def',
 '$CNF->get(\'sudo_most_default\') falls back to the widest configuration level';

throws_ok { $cnf->get( 'sudo_non_existent' ) } 
 qr/Config key: sudo_non_existent cannot be found!/,
 'but $CNF->get(\'sudo_non_existent\') throws an error, when key cannot be found' ;

# lets test an unconfigured application
my $err_msg = 'Configuration file';
my $app     = 'configured_app_without_conffile';

throws_ok { M6::App::Config->new( $app ) }
 qr/$err_msg.*/,
  '... just like when APP is configured, but config file does not exist.';

is $cnf->put(), 1,
 '$CNF->put(undef,undef) returns number of arguments as long as it\'s not implemented.';

# lets test get_all function, both in hash & hashref context

my $hash_ref = M6::App::Config->get_all( 'test-application', 'NL' );
my $exp_ref  = { key => 'value', 
                 foo => 'bar',
                 ping_header => '/usr/bin/sudo /bin/ping',
                 sudo              => '/usr/bin/sudo', 
                 sudo_default      => '/usr/bin/sudo_def',
                 sudo_most_default => '/usr/bin/sudo_most_def',
                 ndisc_header      => '/usr/bin/ndisc6'
        };

is ref $hash_ref, 'HASH',
 $class . '->get_all(APP, SITE) returns a hash reference, in such a contect';

is_deeply $hash_ref, $exp_ref,
 '... and the hash reference contains all key-value pairs, found in config.';

is $hash_ref->{foo}, 'bar',
 '... and the site specific setting did not get overwritten by default value';

my %hash     = M6::App::Config->get_all( 'test-application', 'NL' );
my %exp_hash = %$exp_ref;

is ref( %hash ), '',
 '... when it\'s called in LIST context, it returns a hash,'.
 ' instead of a reference';

is_deeply \%hash, \%exp_hash,
 '... and the returned hash contains all the key value pairs.';

my $C = M6::App::Config->get_all( 'm6-autoprovision', 'NL' );
is $C->{testint}, 'not_to_be_overwritten',
 $class . '->get_all(APP, SITE) does not overwrite site specific settings.'
